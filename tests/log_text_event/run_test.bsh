#!/bin/bash
#
#   DESCRIPTION:
#     Script to run the regression test for the LogTextEvent class.
#     
#     The LogTextEvent class functionality is tested by invoking the test
#     executable with various arguments.  Some of the tests simply compare
#     the combined output to a reference file.  Other tests also compare
#     log files generated by the program to reference log files.
#     
#     Pass/fail counts are maintained and reported at the end of the
#     script.
#
#     The script returns the total failure count.
#   
#   
#   STATUS:  Prototype
#   VERSION:  1.00
#   CODER:  Dean Stevens
#   
#   LICENSE:  The MIT License (MIT)
#             See LICENSE.txt in the root (sim) directory of this project.
#   Copyright (c) 2014 Spinnaker Advisory Group, Inc.

# Name for these tests
TESTNM="TEXT EVENT LOGGER"
# Test pass/fail counts
PASSED=0
FAILED=0
# Reference (good) files for compare
REF="test_ref/"
# Output (test against) files for compare
TST="test_out/"
# Filename extension for the test files
EXTN=".txt"
# The executable to test
EXE='./log_text_event.exe'
# The pathname to the directory with files to include with the source cmd
IDIR="../../scripts/"

source ${IDIR}clean_test_dir.bsh
source ${IDIR}cmp_files.bsh
source ${IDIR}exe_test.bsh

clean_test_dir $TST

pkg_test() {
    # runs the "exe_test" script with the name of the test specifying
    # the argument to the executable, the test file base name and the test
    # name.  Also, tells exe_test to separate stdout and stderr.
    # $1 - Test name
    # $2 - Flag telling exe_test how to treat stdout & stderr, also which
    #      file pairs to compare
    if (( $# == 2 )); then
        exe_test $1 $1 $EXTN $1 $2
    else
        exe_test $1 $1 $EXTN $1
    fi
}

# Run the tests...

LOGF="outtst.csv"
pkg_test "OPEN_FILE"
# Verify that the Open actually created the file...
if [ ! -f $TST$LOGF ]; then
    echo "ERROR: \"$TST$LOGF\" Should have been created. It wasn't!"
    let FAILED++
fi

pkg_test "HEADER" false
pkg_test "RECORD" false
pkg_test "FULL_WRITE" false
pkg_test "BAD_PATH"
pkg_test "HDR_WRT_FAIL"
pkg_test "HDR_BAD_STREAM"
pkg_test "TIME_NOT_READY"
pkg_test "TEXT_NOT_READY"
pkg_test "TIME_NOT_READY_VER"
pkg_test "TEXT_NOT_READY_VER"
pkg_test "REC_WRT_FAIL"
pkg_test "REC_BAD_STREAM"
pkg_test "BAD_STREAM"
pkg_test "TIME_OVER"


show_scores "$TESTNM TESTS"

if [ $FAILED -gt 0 ] ; then
    fail_banner
    exit $FAILED
else
    echo -e "\n$EXE Test Passed!\n"
    exit 0
fi
